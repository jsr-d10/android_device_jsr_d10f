From 4cdbadfcbee8796bbb0684ad2ea6088e13842f1c Mon Sep 17 00:00:00 2001
From: remittor <remittor@gmail.com>
Date: Fri, 10 Jun 2016 15:06:28 +0300
Subject: [PATCH 2/2] Wakelock Blocker

---
 AndroidManifest.xml                                |   7 +
 res/layout/wakelock_blocker.xml                    |  68 +++++
 res/layout/wakelock_item.xml                       |  14 ++
 res/values/cm_strings.xml                          |  12 +
 res/xml/performance_settings.xml                   |   5 +
 res/xml/wakelock_pref.xml                          |  12 +
 .../settings/cyanogenmod/WakeLockBlocker.java      | 276 +++++++++++++++++++++
 7 files changed, 394 insertions(+)
 create mode 100644 res/layout/wakelock_blocker.xml
 create mode 100644 res/layout/wakelock_item.xml
 create mode 100644 res/xml/wakelock_pref.xml
 create mode 100644 src/com/android/settings/cyanogenmod/WakeLockBlocker.java

diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 3f53b75d5d..d10c02f4c6 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -1869,6 +1869,13 @@
 
         <activity android:name=".cyanogenmod.PerformanceSettings" />
 
+        <activity android:name=".cyanogenmod.WakeLockBlocker"
+                android:label="@string/wakelock_blocker" >
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+            </intent-filter>
+        </activity>
+
         <activity android:name=".ApnEditor" />
 
         <activity android:name="Settings$AnonymousStatsActivity"
diff --git a/res/layout/wakelock_blocker.xml b/res/layout/wakelock_blocker.xml
new file mode 100644
index 0000000000..778536658d
--- /dev/null
+++ b/res/layout/wakelock_blocker.xml
@@ -0,0 +1,68 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:minHeight="?android:attr/listPreferredItemHeight"
+    android:gravity="center_vertical"
+    android:paddingEnd="?android:attr/scrollbarSize"
+    android:background="?android:attr/selectableItemBackground"
+    android:orientation="vertical">
+
+    <LinearLayout
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:gravity="center_vertical"
+        android:orientation="horizontal">
+
+        <RelativeLayout
+            android:layout_width="200dip"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="6dip"
+            android:layout_marginBottom="6dip"
+            android:layout_weight="1">
+
+            <TextView android:id="@+id/wakelock_blocker_title"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:singleLine="true"
+                android:textAppearance="?android:attr/textAppearanceMedium"
+                android:ellipsize="marquee"
+                android:text="@string/wakelock_blocker_title"
+                android:fadingEdge="horizontal" />
+
+            <TextView android:id="@+id/wakelock_blocker_title_summary"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_below="@id/wakelock_blocker_title"
+                android:layout_alignStart="@id/wakelock_blocker_title"
+                android:textAppearance="?android:attr/textAppearanceSmall"
+                android:textColor="?android:attr/textColorSecondary"
+                android:text="@string/wakelock_blocker_summary"
+                android:maxLines="4" />
+
+        </RelativeLayout>
+
+        <LinearLayout android:id="@+android:id/widget_frame"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:gravity="center_vertical"
+            android:orientation="vertical" >
+
+            <Switch
+                android:id="@+id/wakelock_blocker_switch"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:padding="4dip"/>
+        </LinearLayout>
+    </LinearLayout>
+
+    <TextView
+        android:id="@+id/wakelock_list_header"
+        android:text="@string/wakelock_list_header"
+        style="?android:attr/listSeparatorTextViewStyle" />
+
+    <ListView
+            android:id="@+id/wakelock_list"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"/>
+</LinearLayout>
diff --git a/res/layout/wakelock_item.xml b/res/layout/wakelock_item.xml
new file mode 100644
index 0000000000..bea7ba80ff
--- /dev/null
+++ b/res/layout/wakelock_item.xml
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="wrap_content">
+
+    <CheckBox
+        android:id="@+id/wakelock_blocked"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceSmall"
+        android:focusable="false"/>
+
+</LinearLayout>
diff --git a/res/values/cm_strings.xml b/res/values/cm_strings.xml
index 42d6d4fa01..063d766bc0 100644
--- a/res/values/cm_strings.xml
+++ b/res/values/cm_strings.xml
@@ -529,6 +529,18 @@ two in order to insert additional control points. \'Remove\' deletes the selecte
     <string name="quiet_hours_haptic_summary">Disable haptic feedback</string>
     <string name="quiet_hours_active_period">Active from <xliff:g id="start">%1$s</xliff:g> to <xliff:g id="end">%2$s</xliff:g></string>
 
+    <!-- Wakelock blocker -->
+    <string name="wakelock_blocker_header_summary">@null</string>
+    <string name="wakelock_blocker">Wakelock Blocker</string>
+    <string name="battery_optimizer_title">Battery optimizer</string>
+    <string name="wakelock_blocker_title">Wakelock blocker</string>
+    <string name="wakelock_blocker_summary">Block system wakelocks</string>
+    <string name="wakelock_blocker_save">Save</string>
+    <string name="wakelock_list_header">Available wakelocks</string>
+    <string name="wakelock_blocker_reload">Reload</string>
+    <string name="wakelock_blocker_warning_title">Proceed with caution</string>
+    <string name="wakelock_blocker_warning">Blocking wakelocks have the potential to cause instability, crashes or data loss</string>
+
     <!-- Ringer mute options -->
     <string name="quiet_hours_ringer_allow_all">Ring for all callers</string>
     <string name="quiet_hours_ringer_allow_contacts">Ring for all contacts</string>
diff --git a/res/xml/performance_settings.xml b/res/xml/performance_settings.xml
index c6064e12e3..1903c3192b 100644
--- a/res/xml/performance_settings.xml
+++ b/res/xml/performance_settings.xml
@@ -40,6 +40,11 @@
         android:key="perf_system_prefs"
         android:title="@string/accessibility_system_title">
 
+        <PreferenceScreen
+            android:key="wakelock_blocker"
+            android:fragment="com.android.settings.cyanogenmod.WakeLockBlocker"
+            android:title="@string/wakelock_blocker_title" />
+
         <PreferenceScreen
             android:key="processor"
             android:fragment="com.android.settings.cyanogenmod.Processor"
diff --git a/res/xml/wakelock_pref.xml b/res/xml/wakelock_pref.xml
new file mode 100644
index 0000000000..f29dfb0a44
--- /dev/null
+++ b/res/xml/wakelock_pref.xml
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<PreferenceScreen
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:title="@string/wakelock_blocker_title">
+
+    <SwitchPreference
+        android:key="wakelock_blocking_enabled"
+        android:title="@string/wakelock_blocker_title"
+        android:summary="@string/wakelock_blocker_summary"
+        android:defaultValue="false" />
+
+</PreferenceScreen>
diff --git a/src/com/android/settings/cyanogenmod/WakeLockBlocker.java b/src/com/android/settings/cyanogenmod/WakeLockBlocker.java
new file mode 100644
index 0000000000..3000f6ba18
--- /dev/null
+++ b/src/com/android/settings/cyanogenmod/WakeLockBlocker.java
@@ -0,0 +1,276 @@
+package com.android.settings.cyanogenmod;
+
+import android.content.Context;
+import android.os.Bundle;
+import android.os.PowerManager;
+import android.util.Log;
+import android.view.View;
+import android.view.ViewGroup;
+import android.preference.PreferenceFragment;
+import android.view.LayoutInflater;
+import android.widget.Switch;
+import android.widget.ListView;
+import android.widget.ArrayAdapter;
+import android.widget.TextView;
+import android.widget.CheckBox;
+import android.widget.CompoundButton;
+import android.widget.AdapterView;
+import android.provider.Settings;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+
+import java.util.List;
+import java.util.Iterator;
+import java.util.ArrayList;
+import java.util.Map;
+import java.util.HashMap;
+import java.util.Collections;
+
+import com.android.settings.R;
+import com.android.settings.SettingsPreferenceFragment;
+
+public class WakeLockBlocker extends SettingsPreferenceFragment {
+
+    private static final String TAG = "WakeLockBlocker";
+
+    private Switch mBlockerEnabled;
+    private ListView mWakeLockList;
+    private List<String> mSeenWakeLocks;
+    private List<String> mBlockedWakeLocks;
+    private LayoutInflater mInflater;
+    private Map<String, Boolean> mWakeLockState;
+    private WakeLockListAdapter mListAdapter;
+    private boolean mEnabled;
+    private AlertDialog mAlertDialog;
+    private boolean mAlertShown = false;
+    private TextView mWakeLockListHeader;
+
+    private static final int MENU_RELOAD = Menu.FIRST;
+    private static final int MENU_SAVE = Menu.FIRST + 1;
+
+    public class WakeLockListAdapter extends ArrayAdapter<String> {
+
+        public WakeLockListAdapter(Context context, int resource, List<String> values) {
+            super(context, R.layout.wakelock_item, resource, values);
+        }
+
+        @Override
+        public View getView(int position, View convertView, ViewGroup parent) {
+            View rowView = mInflater.inflate(R.layout.wakelock_item, parent, false);
+            final CheckBox check = (CheckBox)rowView.findViewById(R.id.wakelock_blocked);
+            check.setText(mSeenWakeLocks.get(position));
+
+            Boolean checked = mWakeLockState.get(check.getText().toString());
+            check.setChecked(checked.booleanValue());
+
+            if(checked.booleanValue()){
+                check.setTextColor(getResources().getColor(android.R.color.holo_red_light));
+            }
+
+            check.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
+                    @Override
+                    public void onCheckedChanged(CompoundButton v, boolean checked) {
+                        mWakeLockState.put(v.getText().toString(), new Boolean(checked));
+                        if(checked){
+                            check.setTextColor(getResources().getColor(android.R.color.holo_red_light));
+                        } else {
+                            check.setTextColor(getResources().getColor(android.R.color.primary_text_dark));
+                        }
+                    }
+            });
+            return rowView;
+        }
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                             Bundle savedInstanceState) {
+        mInflater = inflater;
+        setHasOptionsMenu(true);
+        return inflater.inflate(R.layout.wakelock_blocker, container, false);
+    }
+
+    @Override
+    public void onActivityCreated(Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+
+        mWakeLockState = new HashMap<String, Boolean>();
+        updateSeenWakeLocksList();
+        updateBlockedWakeLocksList();
+
+        mBlockerEnabled = (Switch) getActivity().findViewById(
+                R.id.wakelock_blocker_switch);
+        mWakeLockList = (ListView) getActivity().findViewById(
+                R.id.wakelock_list);
+        mWakeLockListHeader = (TextView) getActivity().findViewById(
+                R.id.wakelock_list_header);
+
+        mListAdapter = new WakeLockListAdapter(getActivity(), android.R.layout.simple_list_item_multiple_choice,
+                mSeenWakeLocks);
+        mWakeLockList.setAdapter(mListAdapter);
+
+        updateSwitches();
+
+        // after updateSwitches!!!
+        mBlockerEnabled
+                .setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
+                    @Override
+                    public void onCheckedChanged(CompoundButton v, boolean checked) {
+                        if (checked && isFirstEnable() && !mAlertShown){
+                            showAlert();
+                            mAlertShown = true;
+                        }
+
+                        Settings.System.putInt(getActivity().getContentResolver(),
+                                Settings.System.WAKELOCK_BLOCKING_ENABLED,
+                                checked?1:0);
+
+                        updateSwitches();
+                    }
+                });
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+    }
+
+    private boolean isFirstEnable() {
+        return Settings.System.getString(getActivity().getContentResolver(),
+                Settings.System.WAKELOCK_BLOCKING_ENABLED) == null;
+    }
+
+    private void updateSwitches() {
+        mBlockerEnabled.setChecked(Settings.System.getInt(getActivity().getContentResolver(),
+                Settings.System.WAKELOCK_BLOCKING_ENABLED, 0)==1?true:false);
+
+        mEnabled = mBlockerEnabled.isChecked();
+        //mWakeLockList.setEnabled(mEnabled);
+        mWakeLockList.setVisibility(mEnabled ?View.VISIBLE : View.INVISIBLE);
+        mWakeLockListHeader.setVisibility(mEnabled ?View.VISIBLE : View.INVISIBLE);
+    }
+
+    private void updateSeenWakeLocksList() {
+        PowerManager pm = (PowerManager) getActivity().getSystemService(Context.POWER_SERVICE);
+        Log.d("maxwen", pm.getSeenWakeLocks());
+
+        String seenWakeLocks =  pm.getSeenWakeLocks();
+        mSeenWakeLocks = new ArrayList<String>();
+
+        if (seenWakeLocks!=null && seenWakeLocks.length()!=0){
+            String[] parts = seenWakeLocks.split("\\|");
+            for(int i = 0; i < parts.length; i++){
+                mSeenWakeLocks.add(parts[i]);
+                mWakeLockState.put(parts[i], new Boolean(false));
+            }
+        }
+    }
+
+    private void updateBlockedWakeLocksList() {
+        String blockedWakelockList = Settings.System.getString(getActivity().getContentResolver(),
+                Settings.System.WAKELOCK_BLOCKING_LIST);
+
+        mBlockedWakeLocks = new ArrayList<String>();
+
+        if (blockedWakelockList!=null && blockedWakelockList.length()!=0){
+            String[] parts = blockedWakelockList.split("\\|");
+            for(int i = 0; i < parts.length; i++){
+                mBlockedWakeLocks.add(parts[i]);
+
+                // add all blocked but not seen so far
+                if(!mSeenWakeLocks.contains(parts[i])){
+                    mSeenWakeLocks.add(parts[i]);
+                }
+                mWakeLockState.put(parts[i], new Boolean(true));
+            }
+        }
+
+        Collections.sort(mSeenWakeLocks);
+    }
+
+    private void save(){
+        StringBuffer buffer = new StringBuffer();
+        Iterator<String> nextState = mWakeLockState.keySet().iterator();
+        while(nextState.hasNext()){
+            String name = nextState.next();
+            Boolean state=mWakeLockState.get(name);
+            if(state.booleanValue()){
+                buffer.append(name + "|");
+            }
+        }
+        if(buffer.length()>0){
+            buffer.deleteCharAt(buffer.length() - 1);
+        }
+        Log.d("maxwen", buffer.toString());
+        Settings.System.putString(getActivity().getContentResolver(),
+                Settings.System.WAKELOCK_BLOCKING_LIST, buffer.toString());
+    }
+
+    private void reload(){
+        mWakeLockState = new HashMap<String, Boolean>();
+        updateSeenWakeLocksList();
+        updateBlockedWakeLocksList();
+
+    mListAdapter.notifyDataSetChanged();
+    }
+
+    @Override
+    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
+        menu.add(0, MENU_RELOAD, 0, R.string.wakelock_blocker_reload)
+                .setIcon(R.drawable.ic_menu_refresh_holo_dark)
+                .setAlphabeticShortcut('r')
+                .setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM |
+                        MenuItem.SHOW_AS_ACTION_WITH_TEXT);
+        menu.add(0, MENU_SAVE, 0, R.string.wakelock_blocker_save)
+                .setIcon(android.R.drawable.ic_menu_save)
+                .setAlphabeticShortcut('s')
+                .setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM |
+                        MenuItem.SHOW_AS_ACTION_WITH_TEXT);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        switch (item.getItemId()) {
+            case MENU_RELOAD:
+                if (mEnabled){
+                    reload();
+                }
+                return true;
+            case MENU_SAVE:
+                if (mEnabled){
+                    save();
+                }
+                return true;
+            default:
+                return false;
+        }
+    }
+
+    private void showAlert() {
+        /* Display the warning dialog */
+        mAlertDialog = new AlertDialog.Builder(getActivity()).create();
+        mAlertDialog.setTitle(R.string.wakelock_blocker_warning_title);
+        mAlertDialog.setMessage(getResources().getString(R.string.wakelock_blocker_warning));
+        mAlertDialog.setButton(DialogInterface.BUTTON_POSITIVE,
+                getResources().getString(com.android.internal.R.string.ok),
+                new DialogInterface.OnClickListener() {
+                    public void onClick(DialogInterface dialog, int which) {
+                        return;
+                    }
+                });
+        mAlertDialog.show();
+    }
+}
-- 
2.14.1

